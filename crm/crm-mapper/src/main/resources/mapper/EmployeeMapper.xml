<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.crm.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.kaishengit.crm.entity.Employee">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="employee_name" jdbcType="VARCHAR" property="employeeName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="mobile" jdbcType="VARCHAR" property="mobile"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, employee_name, password, create_time, update_time, mobile
  </sql>
    <select id="selectByExample" parameterType="com.kaishengit.crm.example.EmployeeExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from employee
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from employee
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.kaishengit.crm.example.EmployeeExample">
        delete from employee
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.kaishengit.crm.entity.Employee">
    insert into employee (id, employee_name, password, 
      create_time, update_time, mobile
      )
    values (#{id,jdbcType=INTEGER}, #{employeeName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{mobile,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.kaishengit.crm.entity.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="employeeName != null">
                employee_name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="mobile != null">
                mobile,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="employeeName != null">
                #{employeeName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="mobile != null">
                #{mobile,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.kaishengit.crm.example.EmployeeExample" resultType="java.lang.Long">
        select count(*) from employee
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <resultMap id="EmployeeWithDeptMap" type="com.kaishengit.crm.entity.Employee" extends="BaseResultMap">
        <collection property="deptList" ofType="com.kaishengit.crm.entity.Dept">
            <id property="id" column="dept_id"/>
            <result property="deptName" column="dept_name"/>
            <result property="pId" column="p_id"/>
        </collection>

    </resultMap>

    <select id="findByDeptId" resultMap="EmployeeWithDeptMap">
        SELECT
        employee.*,dept.id as dept_id,dept.dept_name,dept.p_id
        FROM employee
        INNER JOIN employee_dept ON employee_dept.employee_id = employee.id
        INNER JOIN dept ON dept.id = employee_dept.dept_id
        INNER JOIN (
        <choose>
            <when test="deptId != null and deptId != ''">
                SELECT
                id
                FROM
                employee
                INNER JOIN employee_dept ON employee_dept.employee_id = employee.id
                <where>
                    employee_dept.dept_id = #{deptId}
                    <if test="employeeName != null and employeeName != ''">
                        and employee_name like concat('%',#{employeeName},'%')
                    </if>
                </where>
                LIMIT #{start},#{length}
            </when>
            <otherwise>
                SELECT
                id
                FROM
                employee
                <where>
                    <if test="employeeName != null and employeeName != ''">
                        employee_name like concat('%',#{employeeName},'%')
                    </if>
                </where>
                LIMIT #{start},#{length}
            </otherwise>
        </choose>
        ) AS temp ON employee.id = temp.id
        order by employee.id desc


    </select>
    <select id="countByDeptId" resultType="java.lang.Long">
      SELECT count(*) FROM employee
        <if test="deptId != null and deptId !=''">
            INNER JOIN employee_dept ON employee.id = employee_dept.employee_id
            WHERE
            employee_dept.dept_id = #{deptId}
        </if>
    </select>
    <select id="findDeptListByEmployeeId" resultType="com.kaishengit.crm.entity.Dept">

        SELECT
            *
        FROM
            dept
        INNER JOIN employee_dept ON dept.id = employee_dept.dept_id
        WHERE
            employee_dept.employee_id = #{employeeId}

            </select>

    <update id="updateByExampleSelective" parameterType="map">
        update employee
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.employeeName != null">
                employee_name = #{record.employeeName,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.mobile != null">
                mobile = #{record.mobile,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update employee
        set id = #{record.id,jdbcType=INTEGER},
        employee_name = #{record.employeeName,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        mobile = #{record.mobile,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.kaishengit.crm.entity.Employee">
        update employee
        <set>
            <if test="employeeName != null">
                employee_name = #{employeeName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="mobile != null">
                mobile = #{mobile,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.kaishengit.crm.entity.Employee">
    update employee
    set employee_name = #{employeeName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      mobile = #{mobile,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>